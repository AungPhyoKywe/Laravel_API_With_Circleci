#version: 2 # use CircleCI 2.0
#
#jobs: # a collection of steps
#  build: # runs not using Workflows must have a `build` job as entry point
#    docker: # run the steps with Docker
#      - image: circleci/php:7.2-node-browsers
#      - image: circleci/mysql:5.7-ram # ...with this image as the primary container; this is where all `steps` will run
#    working_directory: ~/laravel # directory where steps will run
#    steps: # a set of executable commands
#      - checkout # special step to check out source code to working directory
#      - run: sudo apt install -y libsqlite3-dev zlib1g-dev
#      - run: sudo docker-php-ext-install zip
##      - run: sudo apt-get install mysql-client
#      - run: sudo composer self-update
#      - restore_cache: # special step to restore the dependency cache if `composer.lock` does not change
#          keys:
#            - composer-v1-{{ checksum "composer.lock" }}
#            # fallback to using the latest cache if no exact match is found (See https://circleci.com/docs/2.0/caching/)
#            - composer-v1-
##      - run: composer install -n --prefer-dist
#      - save_cache: # special step to save the dependency cache with the `composer.lock` cache key template
#          key: composer-v1-{{ checksum "composer.lock" }}
#          paths:
#            - vendor
##      - restore_cache: # special step to restore the dependency cache if `package-lock.json` does not change
##          keys:
##            - node-v1-{{ checksum "package-lock.json" }}
##            # fallback to using the latest cache if no exact match is found (See https://circleci.com/docs/2.0/caching/)
##            - node-v1-
#      - run: yarn install
##      - save_cache: # special step to save the dependency cache with the `package-lock.json` cache key template
##          key: node-v1-{{ checksum "package-lock.json" }}
##          paths:
##            - node_modules
#      - run: touch storage/testing.sqlite
#      - run: composer update
#      - run: cp .env.example .env
#      - run: composer install
#      - run: php artisan key:generate
#      - run: php artisan config:cache
#      - run: php artisan migrate
#      - run: vendor/bin/phpunit
#
#      #      - run: php artisan migrate --env=testing --database=sqlite_testing --force
##      - run: ./vendor/bin/codecept build
##      - run: ./vendor/bin/codecept run
#      # See https://circleci.com/docs/2.0/deployment-integrations/ for deploy examples
# PHP CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-php/ for more details
#
version: 2
jobs:
  build:
    docker:
      - image: circleci/php:7.2-node-browsers
      - image: circleci/mysql:5.7-ram
        environment:
          - MYSQL_ROOT_PASSWORD=root

    steps:
      - checkout

      - run: sudo apt update # PHP CircleCI 2.0 Configuration File# PHP CircleCI 2.0 Configuration File sudo apt install zlib1g-dev libsqlite3-dev
      - run: sudo docker-php-ext-configure pdo_mysql --with-pdo-mysql=mysqlnd
      - run: sudo docker-php-ext-install zip bcmath pdo_mysql
#      - run: sudo apt-get install mysql-client

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "composer.lock" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      # Retrieve Laravel Nova using credentials stored in CircleCI
#      - run: composer config http-basic.nova.laravel.com ${NOVA_USERNAME} ${NOVA_PASSWORD}

      - run: composer install -n --prefer-dist

      - save_cache:
          key: v1-dependencies-{{ checksum "composer.lock" }}
          paths:
            - ./vendor
#      - restore_cache:
#          keys:
#            - node-v1-{{ checksum "package-lock.json" }}
#            - node-v1-
      - run: npm install
      - save_cache:
          key: node-v1-{{ checksum "package-lock.json" }}
          paths:
            - node_modules

      # prepare the database
#      - run: mysqladmin create test --host="127.0.0.1" --user="root" --password="root"
#      - run: php artisan migrate --env=testing --force

      # run tests
      - run: ./vendor/bin/phpunit
